//Binary to demical in Linkedlist 

int getDecimalValue(ListNode* head) {
     ListNode* temp=head;
     int res=0;
     
     while(temp!=NULL){
         res*=2;
         res+=temp->val;
         temp=temp->next;
     }
        return res;
    }

//Middle of the Linkedlist

 ListNode* middleNode(ListNode* head) {
      if(head==NULL)
      {
          return NULL;
      }
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL && fast->next!=NULL)
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    }

//Delete node in Linkedlist

void deleteNode(ListNode* node) {
     if(node==NULL)
         return;
     
        node->val= node->next->val;
        node->next= node->next->next;
    }

//Reverse Node in Linkedlist

ListNode* reverseList(ListNode* head) {
     if(head==NULL)
     {
         return NULL;
         
     }
        ListNode* prev=NULL;
        ListNode* next=NULL;
        ListNode* temp=head;
        
        while(temp!=NULL)
        {
            next=temp->next;
            temp->next=prev;
            prev=temp;
            temp=next;
        }
        return prev;
    }

//Merge two sorted list

  ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
       if(list1==NULL)
        return list2;
       if(list2==NULL)
           return list1;
      ListNode* k=new ListNode();
      ListNode* head=k;
        
      while(list1!=NULL && list2!=NULL)
      {
          if(list1->val < list2->val)
          {
          ListNode* newnode=new ListNode(list1->val);
          k->next=newnode;
          list1=list1->next;
          }
          else{
          ListNode* newnode=new ListNode(list2->val);
          k->next=newnode;
          list2=list2->next;    
              
          }
          k=k->next;
          
          
      }
        if(list1==NULL && list2!=NULL){
            k->next=list2;
           // list2=list2->next;
            
        }
        
        if(list2==NULL && list1!=NULL){
         k->next=list1;
        // list1=list1->next;   
        }
        
        return head->next;
    }

//Intersection of two nodes in linkedlist

ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
     while(headA!=NULL)
     {
         ListNode* pb=headB;
         while(pb!=NULL)
         {
             if(pb==headA)
                 return headA;
             else
                 pb=pb->next;
         }
         headA=headA->next;
     }
        return NULL;
    }

//palindrome list or not

bool isPalindrome(ListNode* head) {
      if(head==NULL)
          return false;
      ListNode* temp=head;
        ListNode* prev=head;
        stack<ListNode*> st;
       while(temp!=NULL)
       {
         st.push(temp);  
          temp=temp->next;
       }
        
        while(prev!=NULL)
        {
            ListNode* i=st.top();
            st.pop();
            
            if(prev->val!=i->val)
               return false;
            
            prev=prev->next;
        }
        
        return true;
    }

//Linked list Cycle

 bool hasCycle(ListNode *head) {
     if(head==NULL || head->next==NULL)
     {
        return false;
     }
        unordered_map<ListNode*,int> m;
        ListNode* temp=head;
        while(temp!=NULL)
        {
            if(m[temp]==true)
                return true;
            m[temp]=true;
            temp=temp->next;
        }
        return false;
    }

//Add two lists

Node* add(Node** l1,Node** l2)
{
    Node* dummy=new Node();
    Node* temp=dummy;
    int sum=0;
    while(l1!=NULL || l2!=NULL || carry)
    {
        if(l1!=NULL)
        {
          sum+=l1->data;  
        }
        if(l2!=NULL)
        {
            sum+=l2->data;
        }
        sum+=carry;
        carry=sum/10;
        Node* newnode=new Node(sum%10);
        temp->next=newnode;
        
    }
    return dummy->next;
}